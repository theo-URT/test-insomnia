_id: spc_76346d3df4264b5dacee89040425d910
type: ApiSpec
parentId: wrk_2336beb589954b61a99abdfe371b5990
modified: 1669806003633
created: 1669804482726
fileName: my-spec.yaml
contents: >-
  {

  "openapi": "3.0.0",

  "paths": {

  "/auth-api/auth/users/login": {

  "post": {

  "operationId": "login",

  "summary": "Login",

  "description": "TBD",

  "parameters": [],

  "requestBody": {

  "required": true,

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/LoginUserRequestDto"

  }

  }

  }

  },

  "responses": {

  "200": {

  "description": ""

  },

  "202": {

  "description": "Accepted."

  },

  "204": {

  "description": "No Content."

  },

  "301": {

  "description": "Moved Permanently."

  },

  "302": {

  "description": "Found."

  },

  "400": {

  "description": "Bad request.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/BadRequestErrorResponseDto"

  }

  }

  }

  },

  "401": {

  "description": "Unauthorized.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"

  }

  }

  }

  },

  "403": {

  "description": "Forbidden.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/ForbiddenErrorResponseDto"

  }

  }

  }

  },

  "404": {

  "description": "Resource not found.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/NotFoundErrorResponseDto"

  }

  }

  }

  },

  "405": {

  "description": "Method not allowed."

  },

  "406": {

  "description": "Not acceptable."

  },

  "408": {

  "description": "Request timed out."

  },

  "409": {

  "description": "Conflict"

  },

  "410": {

  "description": "Gone"

  },

  "412": {

  "description": "Precondition Failed"

  },

  "413": {

  "description": "Payload Too Large"

  },

  "415": {

  "description": "Unsupported Media Type"

  },

  "422": {

  "description": "Unprocessable Entity"

  },

  "429": {

  "description": "Too many requests"

  },

  "500": {

  "description": "Internal server error.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/InternalServerErrorResponseDto"

  }

  }

  }

  },

  "502": {

  "description": "Bad Gateway."

  },

  "503": {

  "description": "Service Unavailable."

  },

  "504": {

  "description": "Gateway Timeout."

  }

  }

  }

  },

  "/auth-api/auth/users/logout": {

  "get": {

  "operationId": "logout",

  "summary": "Logout",

  "description": "TBD",

  "parameters": [],

  "requestBody": {

  "required": true,

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/LogoutUserRequestDto"

  }

  }

  }

  },

  "responses": {

  "200": {

  "description": ""

  },

  "202": {

  "description": "Accepted."

  },

  "204": {

  "description": "No Content."

  },

  "301": {

  "description": "Moved Permanently."

  },

  "302": {

  "description": "Found."

  },

  "400": {

  "description": "Bad request.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/BadRequestErrorResponseDto"

  }

  }

  }

  },

  "401": {

  "description": "Unauthorized.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"

  }

  }

  }

  },

  "403": {

  "description": "Forbidden.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/ForbiddenErrorResponseDto"

  }

  }

  }

  },

  "404": {

  "description": "Resource not found.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/NotFoundErrorResponseDto"

  }

  }

  }

  },

  "405": {

  "description": "Method not allowed."

  },

  "406": {

  "description": "Not acceptable."

  },

  "408": {

  "description": "Request timed out."

  },

  "409": {

  "description": "Conflict"

  },

  "410": {

  "description": "Gone"

  },

  "412": {

  "description": "Precondition Failed"

  },

  "413": {

  "description": "Payload Too Large"

  },

  "415": {

  "description": "Unsupported Media Type"

  },

  "422": {

  "description": "Unprocessable Entity"

  },

  "429": {

  "description": "Too many requests"

  },

  "500": {

  "description": "Internal server error.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/InternalServerErrorResponseDto"

  }

  }

  }

  },

  "502": {

  "description": "Bad Gateway."

  },

  "503": {

  "description": "Service Unavailable."

  },

  "504": {

  "description": "Gateway Timeout."

  }

  },

  "security": [

  {

  "bearer": []

  }

  ]

  }

  },

  "/auth-api/auth/orgs/users": {

  "post": {

  "operationId": "createAdmin",

  "summary": "createAdmin",

  "description": "Creates an admin user",

  "parameters": [],

  "requestBody": {

  "required": true,

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/CreateAdminRequestDto"

  }

  }

  }

  },

  "responses": {

  "200": {

  "description": ""

  },

  "202": {

  "description": "Accepted."

  },

  "204": {

  "description": "No Content."

  },

  "301": {

  "description": "Moved Permanently."

  },

  "302": {

  "description": "Found."

  },

  "400": {

  "description": "Bad request.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/BadRequestErrorResponseDto"

  }

  }

  }

  },

  "401": {

  "description": "Unauthorized.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"

  }

  }

  }

  },

  "403": {

  "description": "Forbidden.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/ForbiddenErrorResponseDto"

  }

  }

  }

  },

  "404": {

  "description": "Resource not found.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/NotFoundErrorResponseDto"

  }

  }

  }

  },

  "405": {

  "description": "Method not allowed."

  },

  "406": {

  "description": "Not acceptable."

  },

  "408": {

  "description": "Request timed out."

  },

  "409": {

  "description": "Conflict"

  },

  "410": {

  "description": "Gone"

  },

  "412": {

  "description": "Precondition Failed"

  },

  "413": {

  "description": "Payload Too Large"

  },

  "415": {

  "description": "Unsupported Media Type"

  },

  "422": {

  "description": "Unprocessable Entity"

  },

  "429": {

  "description": "Too many requests"

  },

  "500": {

  "description": "Internal server error.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/InternalServerErrorResponseDto"

  }

  }

  }

  },

  "502": {

  "description": "Bad Gateway."

  },

  "503": {

  "description": "Service Unavailable."

  },

  "504": {

  "description": "Gateway Timeout."

  }

  }

  }

  },

  "/auth-api/auth/orgs/users/confirm": {

  "post": {

  "operationId": "confirmAdminSignUp",

  "summary": "confrimAdminSignup",

  "description": "TBD",

  "parameters": [],

  "requestBody": {

  "required": true,

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/ConfirmSignUpRequestDto"

  }

  }

  }

  },

  "responses": {

  "200": {

  "description": ""

  },

  "202": {

  "description": "Accepted."

  },

  "204": {

  "description": "No Content."

  },

  "301": {

  "description": "Moved Permanently."

  },

  "302": {

  "description": "Found."

  },

  "400": {

  "description": "Bad request.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/BadRequestErrorResponseDto"

  }

  }

  }

  },

  "401": {

  "description": "Unauthorized.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"

  }

  }

  }

  },

  "403": {

  "description": "Forbidden.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/ForbiddenErrorResponseDto"

  }

  }

  }

  },

  "404": {

  "description": "Resource not found.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/NotFoundErrorResponseDto"

  }

  }

  }

  },

  "405": {

  "description": "Method not allowed."

  },

  "406": {

  "description": "Not acceptable."

  },

  "408": {

  "description": "Request timed out."

  },

  "409": {

  "description": "Conflict"

  },

  "410": {

  "description": "Gone"

  },

  "412": {

  "description": "Precondition Failed"

  },

  "413": {

  "description": "Payload Too Large"

  },

  "415": {

  "description": "Unsupported Media Type"

  },

  "422": {

  "description": "Unprocessable Entity"

  },

  "429": {

  "description": "Too many requests"

  },

  "500": {

  "description": "Internal server error.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/InternalServerErrorResponseDto"

  }

  }

  }

  },

  "502": {

  "description": "Bad Gateway."

  },

  "503": {

  "description": "Service Unavailable."

  },

  "504": {

  "description": "Gateway Timeout."

  }

  }

  }

  },

  "/auth-api/auth/orgs/{orgId}/users": {

  "post": {

  "operationId": "createUsers",

  "summary": "createUsers",

  "description": "Creates an orgUsers programmatically.",

  "parameters": [

  {

  "name": "orgId",

  "required": true,

  "in": "path",

  "schema": {

  "type": "string"

  }

  }

  ],

  "requestBody": {

  "required": true,

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/OrgAdminCreateUsersRequestDto"

  }

  }

  }

  },

  "responses": {

  "200": {

  "description": ""

  },

  "202": {

  "description": "Accepted."

  },

  "204": {

  "description": "No Content."

  },

  "301": {

  "description": "Moved Permanently."

  },

  "302": {

  "description": "Found."

  },

  "400": {

  "description": "Bad request.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/BadRequestErrorResponseDto"

  }

  }

  }

  },

  "401": {

  "description": "Unauthorized.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"

  }

  }

  }

  },

  "403": {

  "description": "Forbidden.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/ForbiddenErrorResponseDto"

  }

  }

  }

  },

  "404": {

  "description": "Resource not found.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/NotFoundErrorResponseDto"

  }

  }

  }

  },

  "405": {

  "description": "Method not allowed."

  },

  "406": {

  "description": "Not acceptable."

  },

  "408": {

  "description": "Request timed out."

  },

  "409": {

  "description": "Conflict"

  },

  "410": {

  "description": "Gone"

  },

  "412": {

  "description": "Precondition Failed"

  },

  "413": {

  "description": "Payload Too Large"

  },

  "415": {

  "description": "Unsupported Media Type"

  },

  "422": {

  "description": "Unprocessable Entity"

  },

  "429": {

  "description": "Too many requests"

  },

  "500": {

  "description": "Internal server error.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/InternalServerErrorResponseDto"

  }

  }

  }

  },

  "502": {

  "description": "Bad Gateway."

  },

  "503": {

  "description": "Service Unavailable."

  },

  "504": {

  "description": "Gateway Timeout."

  }

  },

  "security": [

  {

  "bearer": []

  }

  ]

  }

  },

  "/auth-api/auth/orgs/{orgId}/users/confirm": {

  "post": {

  "operationId": "confirmUserSignUp",

  "summary": "confirmUserSignUp",

  "description": "TBD",

  "parameters": [

  {

  "name": "orgId",

  "required": true,

  "in": "path",

  "schema": {

  "type": "string"

  }

  }

  ],

  "requestBody": {

  "required": true,

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/ConfirmSignUpRequestDto"

  }

  }

  }

  },

  "responses": {

  "200": {

  "description": ""

  },

  "202": {

  "description": "Accepted."

  },

  "204": {

  "description": "No Content."

  },

  "301": {

  "description": "Moved Permanently."

  },

  "302": {

  "description": "Found."

  },

  "400": {

  "description": "Bad request.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/BadRequestErrorResponseDto"

  }

  }

  }

  },

  "401": {

  "description": "Unauthorized.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"

  }

  }

  }

  },

  "403": {

  "description": "Forbidden.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/ForbiddenErrorResponseDto"

  }

  }

  }

  },

  "404": {

  "description": "Resource not found.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/NotFoundErrorResponseDto"

  }

  }

  }

  },

  "405": {

  "description": "Method not allowed."

  },

  "406": {

  "description": "Not acceptable."

  },

  "408": {

  "description": "Request timed out."

  },

  "409": {

  "description": "Conflict"

  },

  "410": {

  "description": "Gone"

  },

  "412": {

  "description": "Precondition Failed"

  },

  "413": {

  "description": "Payload Too Large"

  },

  "415": {

  "description": "Unsupported Media Type"

  },

  "422": {

  "description": "Unprocessable Entity"

  },

  "429": {

  "description": "Too many requests"

  },

  "500": {

  "description": "Internal server error.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/InternalServerErrorResponseDto"

  }

  }

  }

  },

  "502": {

  "description": "Bad Gateway."

  },

  "503": {

  "description": "Service Unavailable."

  },

  "504": {

  "description": "Gateway Timeout."

  }

  }

  }

  },

  "/auth-api/auth/resend-verification": {

  "post": {

  "operationId": "resendVerification",

  "summary": "Resend verification code",

  "description": "TBD",

  "parameters": [],

  "requestBody": {

  "required": true,

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/EmailRequestDto"

  }

  }

  }

  },

  "responses": {

  "200": {

  "description": ""

  },

  "202": {

  "description": "Accepted."

  },

  "204": {

  "description": "No Content."

  },

  "301": {

  "description": "Moved Permanently."

  },

  "302": {

  "description": "Found."

  },

  "400": {

  "description": "Bad request.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/BadRequestErrorResponseDto"

  }

  }

  }

  },

  "401": {

  "description": "Unauthorized.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"

  }

  }

  }

  },

  "403": {

  "description": "Forbidden.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/ForbiddenErrorResponseDto"

  }

  }

  }

  },

  "404": {

  "description": "Resource not found.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/NotFoundErrorResponseDto"

  }

  }

  }

  },

  "405": {

  "description": "Method not allowed."

  },

  "406": {

  "description": "Not acceptable."

  },

  "408": {

  "description": "Request timed out."

  },

  "409": {

  "description": "Conflict"

  },

  "410": {

  "description": "Gone"

  },

  "412": {

  "description": "Precondition Failed"

  },

  "413": {

  "description": "Payload Too Large"

  },

  "415": {

  "description": "Unsupported Media Type"

  },

  "422": {

  "description": "Unprocessable Entity"

  },

  "429": {

  "description": "Too many requests"

  },

  "500": {

  "description": "Internal server error.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/InternalServerErrorResponseDto"

  }

  }

  }

  },

  "502": {

  "description": "Bad Gateway."

  },

  "503": {

  "description": "Service Unavailable."

  },

  "504": {

  "description": "Gateway Timeout."

  }

  }

  }

  },

  "/auth-api/auth/password/reset": {

  "post": {

  "operationId": "resetPassword",

  "summary": "Initiates a flow to reset password",

  "description": "TBD",

  "parameters": [],

  "requestBody": {

  "required": true,

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/ResetPasswordRequestDto"

  }

  }

  }

  },

  "responses": {

  "200": {

  "description": ""

  },

  "202": {

  "description": "Accepted."

  },

  "204": {

  "description": "No Content."

  },

  "301": {

  "description": "Moved Permanently."

  },

  "302": {

  "description": "Found."

  },

  "400": {

  "description": "Bad request.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/BadRequestErrorResponseDto"

  }

  }

  }

  },

  "401": {

  "description": "Unauthorized.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"

  }

  }

  }

  },

  "403": {

  "description": "Forbidden.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/ForbiddenErrorResponseDto"

  }

  }

  }

  },

  "404": {

  "description": "Resource not found.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/NotFoundErrorResponseDto"

  }

  }

  }

  },

  "405": {

  "description": "Method not allowed."

  },

  "406": {

  "description": "Not acceptable."

  },

  "408": {

  "description": "Request timed out."

  },

  "409": {

  "description": "Conflict"

  },

  "410": {

  "description": "Gone"

  },

  "412": {

  "description": "Precondition Failed"

  },

  "413": {

  "description": "Payload Too Large"

  },

  "415": {

  "description": "Unsupported Media Type"

  },

  "422": {

  "description": "Unprocessable Entity"

  },

  "429": {

  "description": "Too many requests"

  },

  "500": {

  "description": "Internal server error.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/InternalServerErrorResponseDto"

  }

  }

  }

  },

  "502": {

  "description": "Bad Gateway."

  },

  "503": {

  "description": "Service Unavailable."

  },

  "504": {

  "description": "Gateway Timeout."

  }

  }

  }

  },

  "/auth-api/auth/password/confirm": {

  "post": {

  "operationId": "confirmPasswordReset",

  "summary": "Confirm reset password",

  "description": "TBD",

  "parameters": [],

  "requestBody": {

  "required": true,

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/ConfirmPasswordResetRequestDto"

  }

  }

  }

  },

  "responses": {

  "200": {

  "description": ""

  },

  "202": {

  "description": "Accepted."

  },

  "204": {

  "description": "No Content."

  },

  "301": {

  "description": "Moved Permanently."

  },

  "302": {

  "description": "Found."

  },

  "400": {

  "description": "Bad request.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/BadRequestErrorResponseDto"

  }

  }

  }

  },

  "401": {

  "description": "Unauthorized.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"

  }

  }

  }

  },

  "403": {

  "description": "Forbidden.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/ForbiddenErrorResponseDto"

  }

  }

  }

  },

  "404": {

  "description": "Resource not found.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/NotFoundErrorResponseDto"

  }

  }

  }

  },

  "405": {

  "description": "Method not allowed."

  },

  "406": {

  "description": "Not acceptable."

  },

  "408": {

  "description": "Request timed out."

  },

  "409": {

  "description": "Conflict"

  },

  "410": {

  "description": "Gone"

  },

  "412": {

  "description": "Precondition Failed"

  },

  "413": {

  "description": "Payload Too Large"

  },

  "415": {

  "description": "Unsupported Media Type"

  },

  "422": {

  "description": "Unprocessable Entity"

  },

  "429": {

  "description": "Too many requests"

  },

  "500": {

  "description": "Internal server error.",

  "content": {

  "application/json": {

  "schema": {

  "$ref": "#/components/schemas/InternalServerErrorResponseDto"

  }

  }

  }

  },

  "502": {

  "description": "Bad Gateway."

  },

  "503": {

  "description": "Service Unavailable."

  },

  "504": {

  "description": "Gateway Timeout."

  }

  }

  }

  }

  },

  "info": {

  "title": "ManageSpace Auth API",

  "description": "ManageSpace Auth API Documentation",

  "version": "1.0",

  "contact": {}

  },

  "tags": [],

  "servers": [],

  "components": {

  "schemas": {

  "BaseError": {

  "type": "object",

  "properties": {

  "message": {

  "type": "string",

  "readOnly": true,

  "example": "This is a message describes the errors caught"

  },

  "code": {

  "type": "string",

  "readOnly": true,

  "example": "This is a error code."

  }

  },

  "required": [

  "message",

  "code"

  ]

  },

  "BadRequestErrorResponseDto": {

  "type": "object",

  "properties": {

  "data": {

  "readOnly": true,

  "example": [],

  "type": "array",

  "items": {

  "type": "string"

  }

  },

  "success": {

  "type": "boolean",

  "readOnly": true,

  "example": false

  },

  "error": {

  "readOnly": true,

  "example": {

  "message": "Encountered 1 validation errors - {error-message}",

  "code": "INVALID_PARAM"

  },

  "allOf": [

  {

  "$ref": "#/components/schemas/BaseError"

  }

  ]

  }

  },

  "required": [

  "data",

  "success",

  "error"

  ]

  },

  "UnauthorizedErrorResponseDto": {

  "type": "object",

  "properties": {

  "data": {

  "readOnly": true,

  "example": [],

  "type": "array",

  "items": {

  "type": "string"

  }

  },

  "success": {

  "type": "boolean",

  "readOnly": true,

  "example": false

  },

  "error": {

  "readOnly": true,

  "example": {

  "message": "Unauthorized",

  "code": "UNAUTHORIZED"

  },

  "allOf": [

  {

  "$ref": "#/components/schemas/BaseError"

  }

  ]

  }

  },

  "required": [

  "data",

  "success",

  "error"

  ]

  },

  "ForbiddenErrorResponseDto": {

  "type": "object",

  "properties": {

  "data": {

  "readOnly": true,

  "example": [],

  "type": "array",

  "items": {

  "type": "string"

  }

  },

  "success": {

  "type": "boolean",

  "readOnly": true,

  "example": false

  },

  "error": {

  "readOnly": true,

  "example": {

  "message": "Access Forbidden",

  "code": "FORBIDDEN"

  },

  "allOf": [

  {

  "$ref": "#/components/schemas/BaseError"

  }

  ]

  }

  },

  "required": [

  "data",

  "success",

  "error"

  ]

  },

  "NotFoundErrorResponseDto": {

  "type": "object",

  "properties": {

  "data": {

  "readOnly": true,

  "example": [],

  "type": "array",

  "items": {

  "type": "string"

  }

  },

  "success": {

  "type": "boolean",

  "readOnly": true,

  "example": false

  },

  "error": {

  "readOnly": true,

  "example": {

  "message": "Resource not found.",

  "code": "RESOURCE_NOT_FOUND"

  },

  "allOf": [

  {

  "$ref": "#/components/schemas/BaseError"

  }

  ]

  }

  },

  "required": [

  "data",

  "success",

  "error"

  ]

  },

  "InternalServerErrorResponseDto": {

  "type": "object",

  "properties": {

  "data": {

  "readOnly": true,

  "example": [],

  "type": "array",

  "items": {

  "type": "string"

  }

  },

  "success": {

  "type": "boolean",

  "readOnly": true,

  "example": false

  },

  "error": {

  "readOnly": true,

  "example": {

  "message": "Internal Server Error",

  "code": "INTERNAL_ERROR"

  },

  "allOf": [

  {

  "$ref": "#/components/schemas/BaseError"

  }

  ]

  }

  },

  "required": [

  "data",

  "success",

  "error"

  ]

  },

  "LoginUserRequestDto": {

  "type": "object",

  "properties": {

  "email": {

  "type": "string",

  "example": "test123@unionrealtime.com",

  "description": "A valid email."

  },

  "password": {

  "type": "string",

  "example": "Testpass123",

  "description": "current password."

  },

  "newPassword": {

  "type": "string",

  "example": "Testpass1234",

  "description": "new password(this is an optional argument needed when user was created by an another user that has idOrgAdmin)"

  }

  },

  "required": [

  "email",

  "password"

  ]

  },

  "LogoutUserRequestDto": {

  "type": "object",

  "properties": {

  "userId": {

  "type": "string",

  "example": "test-user-id-01",

  "description": "A user id."

  }

  },

  "required": [

  "userId"

  ]

  },

  "CreateAdminRequestDto": {

  "type": "object",

  "properties": {

  "firstName": {

  "type": "string",

  "example": "Jason",

  "description": "User first name"

  },

  "lastName": {

  "type": "string",

  "example": "Grubble",

  "description": "User last name"

  },

  "email": {

  "type": "string",

  "example": "jason@example.com",

  "description": "User email"

  },

  "password": {

  "type": "string",

  "example": "Test1234",

  "description": "Password"

  }

  },

  "required": [

  "firstName",

  "lastName",

  "email",

  "password"

  ]

  },

  "ConfirmSignUpRequestDto": {

  "type": "object",

  "properties": {

  "email": {

  "type": "string",

  "example": "test123@unionrealtime.com",

  "description": "A valid email."

  },

  "code": {

  "type": "string",

  "example": "123456",

  "description": "A valid confirmation code from Cognito."

  }

  },

  "required": [

  "email",

  "code"

  ]

  },

  "CreateUserRequestDto": {

  "type": "object",

  "properties": {

  "firstName": {

  "type": "string",

  "example": "Jason",

  "description": "User first name"

  },

  "lastName": {

  "type": "string",

  "example": "Grubble",

  "description": "User last name"

  },

  "email": {

  "type": "string",

  "example": "jason@example.com",

  "description": "User email"

  },

  "password": {

  "type": "string",

  "example": "Test1234",

  "description": "Password"

  },

  "isOrgAdmin": {

  "type": "string",

  "example": "'true' or 'false'",

  "description": "Boolean String",

  "default": "false"

  }

  },

  "required": [

  "firstName",

  "lastName",

  "email",

  "password",

  "isOrgAdmin"

  ]

  },

  "OrgAdminCreateUsersRequestDto": {

  "type": "object",

  "properties": {

  "users": {

  "example": [

  {

  "email": "svetlav444@unionrealtime.com",

  "password": "Temppass123",

  "firstName": "Svetla",

  "lastName": "SS",

  "isOrgAdmin": "false"

  },

  {

  "email": "svetlav555@unionrealtime.com",

  "password": "Demome123",

  "firstName": "Svetlana",

  "lastName": "BB",

  "isOrgAdmin": "false"

  }

  ],

  "description": "Array of users",

  "type": "array",

  "items": {

  "$ref": "#/components/schemas/CreateUserRequestDto"

  }

  }

  },

  "required": [

  "users"

  ]

  },

  "EmailRequestDto": {

  "type": "object",

  "properties": {

  "email": {

  "type": "string",

  "example": "test123@unionrealtime.com",

  "description": "A valid email."

  }

  },

  "required": [

  "email"

  ]

  },

  "ResetPasswordRequestDto": {

  "type": "object",

  "properties": {

  "email": {

  "type": "string",

  "example": "test123@unionrealtime.com",

  "description": "A valid email."

  }

  },

  "required": [

  "email"

  ]

  },

  "ConfirmPasswordResetRequestDto": {

  "type": "object",

  "properties": {

  "email": {

  "type": "string",

  "example": "test123@unionrealtime.com",

  "description": "A valid email."

  },

  "code": {

  "type": "string",

  "example": "123456",

  "description": "A valid confirmation code from Cognito."

  },

  "password": {

  "type": "string",

  "example": "Testpass1234",

  "description": "New password."

  }

  },

  "required": [

  "email",

  "code",

  "password"

  ]

  },

  "AssignOrgRequestDto": {

  "type": "object",

  "properties": {

  "email": {

  "type": "string",

  "example": "jason@example.com",

  "description": "User email"

  },

  "orgId": {

  "type": "string",

  "example": "fe26693b-a4f6-4e4a-9bfd-179dbc77a81",

  "description": "Org ID"

  }

  },

  "required": [

  "email",

  "orgId"

  ]

  },

  "UpdateUserRequestDto": {

  "type": "object",

  "properties": {

  "userId": {

  "type": "string",

  "example": "fe26693b-a4f6-4e4a-9bfd-179dbc77a81",

  "description": "User ID"

  },

  "email": {

  "type": "string",

  "example": "test123@unionrealtime.com",

  "description": "A valid email."

  },

  "firstName": {

  "type": "string",

  "example": "Jason",

  "description": "User first name"

  },

  "middleName": {

  "type": "string",

  "example": "Grubble",

  "description": "User last name"

  },

  "lastName": {

  "type": "string",

  "example": "Grubble",

  "description": "User last name"

  }

  },

  "required": [

  "userId",

  "email",

  "firstName",

  "lastName"

  ]

  }

  }

  }

  }
contentType: yaml
